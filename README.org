#+TITLE: Emacs Initialization
#+AUTHOR: Christopher R. Genovese
#+DATE: 30 Oct 2017

* Overview

  This is my working emacs configuration, currently used for Emacs 25+ but
  should work for Emacs 24+.

  A few notable features:

  + Keybindings: Help

    Default emacs keybindings reserve =C-h= for help. While
    help is important and commonly used, it does not
    need a top-level (control) key. Instead, we do the
    following:

    - =C-h= -- =delete-backward-char=
    - =M-h= -- =backward-kill-word=
    - =C-M-h= -- help

    This is much more efficient than the defaults (no more need for
    backspace and =backward-kill-word= is very commonly useful). The main
    complication is that most modes (and to some extend emacs itself,
    see =help-char=) assume =C-h= for help, which requires additional
    effort to configure.

  + Keybindings: Scrolling and Cutting

    Also in the default keybindings use =C-v= and =M-v= for scrolling up and
    down. This cuts across levels (control to meta) for a
    comparable-level operation and is slow, as a result. It also
    leaves =C-w=, non-mnemonically, for a kill operation. Instead,
    the keybindings here do the following:

    - =C-w= -- scroll down
    - =C-v= -- scroll up
    - =M-w= -- beginning of buffer
    - =M-v= -- end of buffer
    - =M-C-w= -- scroll down other window
    - =M-C-v= -- scroll up other window
    - =C-k= -- kill line
    - =M-k= -- kill region
    - =M-C-k= -- kill sexp

    Again, this requires some remapping in configuring some common
    modes.

  + Help Navigation

    To make the Emacs help system even easier to use, this adds
    two mechanisms for navigating. First =C-M-h g= from any buffer
    moves to the help buffer, where =g= moves back to the previous
    location. Second, =C-M-h= followed by various navigation commands
    moves the help buffer without changing the active buffer.
    These commands are as follows:

    - =C-w=   -- scroll down
    - =C-v=   -- scroll up
    - =M-w=   -- go to beginning of buffer
    - =M-v=   -- go to end of buffer
    - =C-b=   -- back to previous help page
    - =C-f=   -- forward to next help page
    - =RET=   -- push button
    - =TAB=   -- forward-button
    - =S-TAB= -- backward-button
    - =q=     -- quit help

  + Server start

    This initialization always starts the emacs-server so
    you can interact with a running instance using emacsclient.

  + Components and Mods

    The =components= directory contains files that each load
    and configure a cluster of related packages and/or modes.

    The =mods= directory contains mode- or tool-specific modifications and
    code. These represent structural changes or code that offers
    new/improved functionality. This includes improved help navigation,
    directory tracking systems for tcsh and zsh (separately), extensions
    to dired, and some extra tools for AucTeX and Org. Some of the
    earlier mods have been spun off into their own packages (e.g.,
    =win-switch=) or into existing emacs code (e.g., =ibuffer=).

  + Zenburn+ Theme

    A modified zenburn theme, zenburn+, is available
    in =Extras/themes=.

* Installation

  This code in this repository can be installed directly in your emacss
  initialization directory or kept separately. There are slightly
  different steps in the two cases, as described below.

** Method 1. Clone this repository directly into emacs initialization directory

   This is the usual (and recommended) case. Take the following steps.

   1. Move to your emacs initialization directory. Replace
      '=EMACS_D_DIRECTORY'= in the following with the path to that
      directory:

      #+begin_src sh
        cd EMACS_D_DIRECTORY
      #+end_src

   2. Clone this repository into a subdirectory of your
      emacs initialization directory. 

      #+begin_src sh
        git clone https://github.com/genovese/emacs-init.git
      #+end_src
      
   3. Rename =emacs-init= to =init= in this directory.

      #+begin_src sh
        mv emacs-init init
      #+end_src
   4. Change to the =init= directory.

      #+begin_src sh
        cd init
      #+end_src

   5. Run the install script. There is no need to set the =--target=
      option as it will be correct (=..)= by default for this case.
      The script has a variety of options, but the simplest are

      a. Install code, extras, and packages:

         #+begin_src sh
           bash Extras/Install.sh --full
         #+end_src

         which will install the base code and all extras,
         including overwriting =../emacs-custom.el= and
         =.emacs.el= in the home directory. This will also
         install the emacs packages needed to use this
         emacs configuration and will set up emacs to
         use those packages.

      b. Install everything but do not overwrite target files:

         #+begin_src sh
           bash Extras/Install.sh --full --safe
         #+end_src

         which will install the base and extras but will
         not overwrite the =../Cask=, =../emacs-custom.el=, or
         =~/.emacs.el= files if they already exist.

      c. Install only the base code:

         #+begin_src sh
           bash Extras/Install.sh --minimal
         #+end_src

      d. When installing emacs packages with =--install= or =--full=,
         the script attempts to deduce whether to use emacs's
         package system or cask. The =--package= option (and also
         =--homebrew= on Mac OS X) can set this explicitly.

         For instance:
         #+begin_src sh
           bash Extras/Install.sh --full --package=package
         #+end_src
         will use emacs's package system. Other settings
         are =cask= and =cask-homebrew,= if the cask tool
         is installed.

      By including the =--dry-run= flag with any set of other options,
      you can see what the script will do without it taking any
      action. The =--verbose= flag can also be helpful here.
      
      For more details and options, run the script with
      #+begin_src sh
        bash Extras/Install.sh --help
      #+end_src

   6. The script evokes an application (within emacs of course)
      for personalizing some of the settings and data in
      this configuration. This includes:
      
      + Editing the preferences data in the file =data/preferences.el,=
        to reflect your personal settings. The most important
        settings to change are =user-home-page=, =user-email-address=,
        =shell=, and =theme-function=. Simply edit the values for each
        key, as instructed in the application.

      + Editing the customization settings in =emacs-custom.el=. The
        application lists the variables and faces in the custom
        file, showing the current setting, and giving a button to
        push to open a customization buffer for that setting. View
        and change the settings as you like, hitting the 'Apply and
        Save' button in the respective customization buffers. This
        will set these values for future emacs sessions.

      + Viewing some tutorial information about the configuration.

      When complete, hit the 'All Done' button, and the Install
      script will continue.


** Method 2. Keeping this repository separate from an active emacs init directory

   In some cases, you may want to keep this repository separate
   from your active emacs initialization directory. The installation
   is similar to the above.

   1. Clone this repository in a location of your choosing.
      Move to the the super-directory of choice and do

      #+begin_src sh
        git clone https://github.com/genovese/emacs-init.git
      #+end_src

   2. Change to the =emacs-init= directory.

      #+begin_src sh
        cd emacs-init
      #+end_src

   3. Run the install script with ~--target~ set to your emacs
      initialization directory, for instance =~/.emacs.d=. There is a
      variety of options, but the simplest are

      a. Install code, extras, and packages:

         #+begin_src sh
           bash Extras/Install.sh --target=~/.emacs.d --full
         #+end_src
         which will install the base code and all extras,
         including overwriting =../emacs-custom.el= and
         =.emacs.el= in the home directory. This will also
         install the emacs packages needed to use this
         emacs configuration and will set up emacs to
         use those packages.

      b. Install everything but do not overwrite target files:

         #+begin_src sh
           bash Extras/Install.sh --target=~/.emacs.d --full --safe
         #+end_src
         which will install the base and extras but will
         not overwrite the =../Cask=, =../emacs-custom.el=, or
         =~/.emacs.el= files if they already exist.

      c. Install only the base code:

         #+begin_src sh
           bash Extras/Install.sh --target=~/.emacs. --minimal
         #+end_src

      d. When installing emacs packages with =--install= or =--full=,
         the script attempts to deduce whether to use emacs's
         package system or cask. The =--package= option (and also
         =--homebrew= on Mac OS X) can set this explicitly.

         For instance:
         #+begin_src sh
           bash Extras/Install.sh --full --package=package
         #+end_src
         will use emacs's package system. Other settings
         are =cask= and =cask-homebrew,= if the cask tool
         is installed.

      By including the =--dry-run= flag with any set of other options,
      you can see what the script will do without it taking any
      action. The =--verbose= flag can also be helpful here.
      
      For more details and options, run the script with
      #+begin_src sh
        bash Extras/Install.sh --help
      #+end_src

   4. The script evokes an application (within emacs of course)
      for personalizing some of the settings and data in
      this configuration. This includes:
      
      + Editing the preferences data in the file =data/preferences.el,=
        to reflect your personal settings. The most important settings
        to change are =user-home-page=, =user-email-address=,
        and =shell=. Simply edit the values for each key, as instructed
        in the application.

      + Editing the customization settings in =emacs-custom.el=. The
        application lists the variables and faces in the custom
        file, showing the current setting, and giving a button to
        push to open a customization buffer for that setting. View
        and change the settings as you like, hitting the 'Apply and
        Save' button in the respective customization buffers. This
        will set these values for future emacs sessions.

      + Viewing some tutorial information about the configuration.

      When complete, hit the 'All Done' button, and the Install
      script will continue.

   In this case, note that the shell script =Extras/Update.sh= allows
   for simple updating of the Extras files (e.g., =Cask=) from the
   working initialization directory.

** Appendix: Install script overview

   For reference purposes, the =Extras/Install.sh= script roughly does
   does the following, with TARGET set by the --target option:

   1. Create directory =$TARGET/init= if it does not exist.
   2. Recursively copy all files starting with a lower-caser letter
      from this directory to =$TARGET/init=, unless that is the
      current directory.
   3. Copy Extras/home-dot-emacs.el to =~/.emacs.el=, transforming it
      based on the =--package= and =--target= options to set the package source.
      (This can be ~package~, ~cask~, or ~cask-homebrew~)
   4. If =$TARGET/site-lisp= does not exist, create it and copy files
      from this site-lisp directory there.
   5. If =$TARGET/themes= does not exist create it and copy files
      from this themes directory there.
   7. If =--install= is given, move to $TARGET directory temporarily
      and install the packages, either with the included tool (that
      uses emacs's package.el facility) or with the =cask= package
      manager.

   If --package is not supplied, the script will attempt to auto-deduce
   it based on your system, on whether it can find the =cask= tool, and
   on whether the =--homebrew= option is supplied.

* File Manifest

  | File or Directory        | Description/Notes                                                       |
  |--------------------------+-------------------------------------------------------------------------|
  | dot-emacs.el             | Main entry point                                                        |
  | macros.el                | Utility macros used in the configuration                                |
  | ops.el                   | A few user-level operational functions                                  |
  | utils.el                 | A small collection of elisp utilities                                   |
  | theme-support.el         | Configuration and utilities for custom themes                           |
  | keybindings.el           | Keybindings                                                             |
  | translations.el          | Keyboard translations and mouse emulation                               |
  | frames.el                | Commands and tools for manipulating frames                              |
  | hooks.el                 | Hook settings for built-in commands/tools                               |
  | data                     | Directory containing preferences and other user-level data              |
  | data/preferences.el      | User preferences data used throughout the configuration                 |
  | data/user-system.el      | User, platform, and system level constants                              |
  | components               | Directory containing code to configure various emacs tools and packages |
  | components/*.el          | Individual component loaders and configurations                         |
  | mods                     | Directory containing mode- or tool-specific modifications               |
  | mods/*.el                | Code for individual mods, arranged by tool                              |
  | prototypes               | Experimental or pre-packaged code                                       |
  | prototypes/*.el          | Individual prototype modules (give file name '-' prefix to disable)     |
  | Extras                   | Directory with supplementary files to be installed in target or home    |
  | Extras/Install.sh        | Installation shell script (use --help for details)                      |
  | Extras/Update.sh         | Shell script to update Extras from target when repo stored elsewhere    |
  | Extras/Cask              | Current, though non-minimal, Cask file                                  |
  | Extras/themes            | Current custom themes                                                   |
  | Extras/site-lisp         | Current extra elisp                                                     |
  | Extras/home-dot-emacs.el | Init file for home directory that loads packages and this code          |
  | Extras/emacs-custom.el   | My current emacs-custom.el, read during config.                         |
  | Extras/my-env.el         | My current environment settings, use --with-env to install this         |
  | Extras/packages.el       | Package installer tool for emacs, used during Install script            |
  | Extras/review.el         | Application for personalizing configuration, used during Install script |
  | Extras/tutorial.org      | Tutorial document, used during Install script                           |
  | README.org               | This file                                                               |
  |--------------------------+-------------------------------------------------------------------------|
